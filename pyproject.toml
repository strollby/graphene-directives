[tool.poetry]
name = "graphene-directives"
version = "0.1.0"
description = "Schema Directives implementation for graphene"
authors = ["Strollby <developers@strollby.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8"
graphene = ">=3"

[tool.poetry.group.dev.dependencies]
bandit = "*"
pre-commit = "*"
pytest = "*"
pytest-dependency = "*"
ruff = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint]

select = [
    #    "ALL"
    "E", # pycodestyle (E)
    "W", # pycodestyle (W)
    "F", # Pyflakes (F)
    "ANN", # flake8-annotations (ANN)
    "A", # flake8-builtins (A)
    "C4", # flake8-comprehensions (C4)
    "UP", # pyupgrade (UP)
    "Q", # flake8-quotes (Q)
    "RET", # flake8-return (RET)
    "SIM", # flake8-simplify (SIM)
    "ARG", # flake8-unused-arguments (ARG)
    "ISC", # flake8-implicit-str-concat (ISC)
    "ASYNC", # flake8-async (ASYNC)
]

ignore = [
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN204", # Missing return type annotation for special method `__init__`
    "E501", #Line too long (99 > 88)
]

[tool.ruff.format]
quote-style = "double" # Like Black, use double quotes for strings.
indent-style = "space" # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = true
line-ending = "auto" # Like Black, automatically detect the appropriate line ending.

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["id", "type"] # ignore built in id and type (conflict with model and graphql)

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401", # imported but unused
    "F403", # unable to detect undefined names (using *)
    "E501", #Line too long (99 > 88)
]

# F811 - "redefinition of unused variable"
# F401 - "imported but unused"
# F811, F401 are conflicting with tests with scenarios
"*/tests/*" = ["F811", "F401"]
"*/test_health/*" = ["F811", "F401"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-v -s"
testpaths = [
    "tests/test_cache.py",
]
